/* Initialize */

@font-face {
  font-family: "rma-icons";
  src: url("../fonts/rma-icons.eot");
  src: url("../fonts/rma-icons.eot?#iefix") format("eot"), url("../fonts/rma-icons.woff2") format("woff2"), url("../fonts/rma-icons.woff") format("woff"), url("../fonts/rma-icons.ttf") format("truetype"), url("../fonts/rma-icons.svg#rma-icons") format("svg");
}

.ic:before {
  font-family: "rma-icons";
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-style: normal;
  font-variant: normal;
  font-weight: normal;
  /* speak: none; only necessary if not using the private unicode range (firstGlyph option) */
  text-decoration: none;
  text-transform: none;
}

.ic-bars:before {
  content: "\E001";
}

.ic-close:before {
  content: "\E002";
}

* {
  margin: 0;
  padding: 0;
  border: 0;
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  font-family: Verdana, sans-serif;
}

ul,
ol {
  list-style: none;
}

a {
  -webkit-transition: all .25s;
  transition: all .25s;
}

.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  border: 0;
}

h2,
.h2 {
  font-size: 0.875rem;
  font-weight: bold;
  margin: 1em 0;
}

h2 ~ h2,
h2 ~ .h2,
.h2 ~ h2,
.h2 ~ .h2 {
  margin-top: 3em;
}

p {
  font-size: 0.625rem;
  margin: 1em 0;
  line-height: 1.4em;
}

.listing-grid img {
  display: block;
  width: 100%;
  height: auto;
  -webkit-transition: all .25s;
  transition: all .25s;
  position: relative;
  z-index: 0;
}

.listing-grid a {
  display: block;
  position: relative;
  color: #FFFFFF;
  text-shadow: 0px 0px 2px #111111;
  background: #C8C9CF;
}

.listing-grid a:hover img,
.listing-grid a:focus img {
  opacity: .5;
}

.listing-grid h2 {
  position: absolute;
  bottom: 0;
  left: 0;
  margin: 0;
  z-index: 1;
  padding: 10px;
}

.cw {
  min-height: 100vh;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
}

.cw > header > div {
  max-width: 1240px;
  margin: auto;
  padding: 0 20px;
  position: -webkit-sticky;
  position: sticky;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-pack: justify;
      -ms-flex-pack: justify;
          justify-content: space-between;
  z-index: 1000;
}

.cw > header h1 {
  font-size: 0.8125rem;
  color: #FF2020;
  font-weight: bold;
}

.cw > header h1 a {
  display: block;
  color: #FF2020;
  text-decoration: none;
  padding: 11px 0 18px 0;
}

.cw > header h1 a:hover,
.cw > header h1 a:focus {
  color: #636569;
}

.cw > header .overlay .toggle-trigger {
  height: 45px;
  width: 52px;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  position: absolute;
  top: 0px;
  right: 0px;
  color: #FFFFFF;
  font-size: 1.5rem;
}

.cw > header .menu-toggle:checked ~ .overlay {
  -webkit-transform: translateX(0);
          transform: translateX(0);
}

.cw .nav-primary {
  -webkit-box-flex: 1;
      -ms-flex-positive: 1;
          flex-grow: 1;
}

.cw .nav-primary ul {
  font-size: 1rem;
  text-transform: uppercase;
  text-align: center;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
}

.cw .nav-primary a {
  display: block;
  color: #FFFFFF;
  padding: 18px 7.5px 18px 17.5px;
  text-decoration: none;
}

.cw .nav-primary a:hover,
.cw .nav-primary a:focus {
  color: rgba(255, 255, 255, 0.7);
}

.cw > main {
  -webkit-box-flex: 1;
      -ms-flex-positive: 1;
          flex-grow: 1;
}

.cw > main > div {
  max-width: 1240px;
  margin: auto;
  padding: 0 20px;
}

.cw .main-content {
  color: #636569;
}

.cw > footer {
  font-size: 0.75rem;
  color: #202020;
  padding: 24px 0;
}

.cw > footer .company-name {
  font-weight: bold;
}

.cw > footer a {
  color: #202020;
  text-decoration: none;
}

.cw > footer a:hover,
.cw > footer a:focus {
  color: #FF2020;
}

.cw > footer > div {
  max-width: 1240px;
  margin: auto;
  padding: 0 20px;
}

.cw > footer ul {
  margin-bottom: 1em;
}

.cw > footer ul li {
  line-height: 1.4em;
}

.project-images img {
  width: 100%;
  height: auto;
  display: block;
}

.project-images figure {
  padding-bottom: 24px;
}

.project-images figcaption {
  font-size: 0.5625rem;
  line-height: 1.22222em;
  margin-top: 1em;
  color: #636569;
}

.project-detail main nav {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
      -ms-flex-pack: justify;
          justify-content: space-between;
  font-size: 0.75rem;
}

.project-detail main nav a {
  color: #636569;
  text-decoration: none;
}

.project-detail main nav a:hover,
.project-detail main nav a:focus {
  color: #FF2020;
  text-decoration: underline;
}

.project-archive main nav {
  font-size: 0.875rem;
}

.project-archive main nav li {
  margin-bottom: .2em;
}

.project-archive main nav li:last-child {
  margin-top: 2em;
}

.project-archive main nav a {
  color: #636569;
}

.project-archive main nav a:hover,
.project-archive main nav a:focus {
  color: #FF2020;
}

.project-archive main nav a.active {
  color: #FF2020;
  font-weight: bold;
}

.contact-info {
  font-size: 0.75rem;
  margin-bottom: 2em;
}

.contact-info a {
  color: #636569;
}

.contact-info a:hover,
.contact-info a:focus {
  color: #FF2020;
}

.contact-info li.address {
  margin-bottom: 1em;
}

.contact iframe {
  width: 100%;
}

.hp-grid > div {
  margin-bottom: 10px;
}

.hp-grid > .dw {
  grid-column-end: span 2;
}

.hp-grid > .dt {
  grid-row-end: span 2;
}

.hp-grid img {
  width: 100%;
  height: 100%;
  display: block;
  -o-object-fit: cover;
     object-fit: cover;
  position: relative;
  z-index: 0;
  -webkit-transition: all .25s;
  transition: all .25s;
}

.hp-grid .hp-blurb {
  background: #C8C9CF;
  color: #FFFFFF;
  font-size: 1rem;
  padding: 10px;
}

.menu-link {
  position: relative;
  background: #202020;
}

.menu-link > div {
  position: absolute;
  z-index: 10;
  font-size: 1.125rem;
  color: #FFFFFF;
  text-transform: uppercase;
  font-weight: bold;
  text-shadow: 0px 0px 2px #111111;
  -webkit-transition: all .25s;
  transition: all .25s;
}

.menu-link:hover img,
.menu-link:focus img {
  opacity: .5;
}

.dialog {
  width: 100vw;
  height: 100vh;
  position: fixed;
  top: 0;
  left: 0;
  pointer-events: none;
  overflow: auto;
  z-index: 9999;
  display: none;
}

.dialog-open .dialog {
  display: block;
}

@media screen and (min-width: 768px) {
  .listing-grid {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
        -ms-flex-flow: row wrap;
            flex-flow: row wrap;
    margin: -20px / 2;
  }

  .listing-grid article {
    width: 50%;
    -webkit-box-flex: 0;
        -ms-flex: 0 0 50%;
            flex: 0 0 50%;
    padding: 10px;
  }

  .cw > header .overlay {
    -webkit-box-flex: 1;
        -ms-flex-positive: 1;
            flex-grow: 1;
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-pack: end;
        -ms-flex-pack: end;
            justify-content: flex-end;
    -webkit-box-align: center;
        -ms-flex-align: center;
            align-items: center;
  }

  .cw .nav-primary ul {
    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
        -ms-flex-direction: row;
            flex-direction: row;
    -webkit-box-pack: end;
        -ms-flex-pack: end;
            justify-content: flex-end;
    margin-right: -7.5px;
    font-size: 0.75rem;
    font-weight: bold;
  }

  .cw .nav-primary a {
    color: #636569;
    padding: 11px 7.5px 18px 17.5px;
  }

  .cw .nav-primary a:hover,
  .cw .nav-primary a:focus {
    color: #FF2020;
  }

  .cw .toggle-trigger {
    display: none;
  }

  .cw .main-content {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
  }

  .cw .main-content > div:first-child {
    width: 25%;
    -webkit-box-flex: 0;
        -ms-flex: 0 0 25%;
            flex: 0 0 25%;
    padding-right: 10px;
  }

  .cw .main-content > div:last-child {
    -webkit-box-flex: 1;
        -ms-flex-positive: 1;
            flex-grow: 1;
    padding-left: 10px;
  }

  .cw > footer {
    font-size: 0.625rem;
  }

  .cw > footer ul {
    margin: 0;
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
  }

  .cw > footer ul li + li:before {
    display: inline-block;
    content: "|";
    padding: 0 8px;
  }

  .project-images {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
        -ms-flex-flow: row wrap;
            flex-flow: row wrap;
    margin: -5px;
  }

  .project-images figure {
    width: 50%;
    padding: 5px 5px 24px 5px;
  }

  .project-images figure:first-child {
    width: 100%;
  }

  .project-detail main nav :first-child {
    -webkit-transform: translateX(-14px);
            transform: translateX(-14px);
  }

  .project-detail main nav :last-child {
    -webkit-transform: translateX(14px);
            transform: translateX(14px);
  }

  .hp-grid {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    grid-auto-rows: 1fr;
    grid-auto-flow: dense;
    grid-gap: 10px;
  }

  .hp-grid > div {
    margin: 0;
  }

  .menu-link > div {
    font-size: 1.75rem;
  }

  .menu-link.tl > div {
    top: 5px;
    left: 5px;
    -webkit-transform-origin: left center;
            transform-origin: left center;
  }

  .menu-link.bl > div {
    bottom: 5px;
    left: 5px;
    -webkit-transform-origin: left center;
            transform-origin: left center;
  }

  .menu-link.tr > div {
    top: 5px;
    right: 5px;
    -webkit-transform-origin: right center;
            transform-origin: right center;
  }

  .menu-link.br > div {
    bottom: 5px;
    right: 5px;
    -webkit-transform-origin: right center;
            transform-origin: right center;
  }
}

@media screen and (min-width: 1025px) {
  .listing-grid article {
    width: 33.3%;
    -webkit-box-flex: 0;
        -ms-flex: 0 0 33.3%;
            flex: 0 0 33.3%;
  }

  .cw > footer > div > div {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-pack: justify;
        -ms-flex-pack: justify;
            justify-content: space-between;
    -webkit-box-align: center;
        -ms-flex-align: center;
            align-items: center;
  }

  .project-detail .main-content > div:last-child {
    width: 50%;
    -webkit-box-flex: 0;
        -ms-flex-positive: 0;
            flex-grow: 0;
  }

  .hp-grid {
    grid-template-columns: 1fr 1fr 1fr 1fr;
  }

  .hp-grid .hp-blurb {
    font-size: 1.25rem;
  }
}

@media screen and (max-width: 767.9px) {
  .cw > header .overlay {
    position: fixed;
    width: 100%;
    height: 100vh;
    z-index: 9000;
    top: 0;
    left: 0;
    background: rgba(32, 32, 32, 0.95);
    -webkit-transform: translateX(100%);
            transform: translateX(100%);
    -webkit-transition: all .25s;
    transition: all .25s;
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-orient: vertical;
    -webkit-box-direction: normal;
        -ms-flex-direction: column;
            flex-direction: column;
  }

  .cw .nav-primary > div,
  .cw .nav-primary ul {
    height: 100%;
  }
}
/*# sourceMappingURL=data:application/json;base64, */